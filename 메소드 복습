[1] 메소드 선언 방법

modifiers , 리턴타입, 메소드 이름(datatype 변수 이름,...){..메소드 선언부
	//메소드 구현부
	//기능작성
	//return 가지고 갈 값;
}


1.modifiers - 0개 이상 올 수 있다
	  - access modifier(접근 제한자) : 
				1)public:어디서나 아무나
				2)protected: 상속관계라면 어디서나
				3)default(생략):같은 폴더 내라면 아무나 (0개)
				4)private : 같은 클래스(객체) 내에서만 접근 가능
	  -상황에 따라 static, final, abstract,synchronized...

2.리턴 타입 : 반드시 한 개 와야 함
	1)void : 리턴하지 않는다.
	2)primitive type : 8가지(short,char->int->long->float->double/boolean)
	3)objective type : class Test{} 존재한다면 Test도 타입이 될 수 있다.
	-만약 void가 아닌 기본형 또는 객체타입인 경우 반드시 구현부 마지막 줄에 return 가지고 갈 값

3. 메소드 이름; identifier 규칙에 의해 작성한다.
	-첫 글자 소문자, 두번째부터 숫자 가능, _,$ 이외의 특수문자 사용 안됨.
	-_(언더바) 권장 안함, 낙타 표기법


   parameter = 매개변수 = 인수
	: 메소드 호출하는 주체가 전달해주는 값을 받을 변수(그릇)



[2] 메소드 호출 방법 3가지
   
   1) 가장 일반적인 방법
	-호출하려는 메소드를 감싸고 있는 클래스를 먼저 생성한다
	     -객체 생성 방법
		1) class이름 변수이름 = new class 이름(); //heap 영역에 만들어진다. (여기서 class 이름은 객체 타입)
		2) 메소드 호출 : 변수이름.메소드이름(값,값...);


   2) static 메소드인 경우 : 
	- 객체 생성 없이 바로 호출 가능 : class이름.메소드이름(값,값...);  //ex) Math.random();
	*아무 때나 선언 안됨 - 메모리 불필요하게 낭비 가능성
			     - static은 static끼리 놀기 때문에 main에서 static 아닌 일반 메소드 호출 불가능(그래서 객체 생성해서 접근)
			     - static은 내부에서 this. 호출도 안됨


   3) 같은 클래스 내부인 경우
	- 객체 생성 없이 this.메소드이름(값, 값,...); 호출한다.
	this 키워드는 생략가능 메소드이름(값,값...); (this는 생성의 의미, 생성이 되었다는 것을 보장받기 때문에 객체 생성 불필요)

   *2) -> 3) -> 1)의 순서대로 호출하자!!!

	*static은 생성된 것이 보장되지만 나머지는 그렇지 않기 때문에 static은 static끼리만 논다!!!




[3] overloading이란?

   - 같은 클래스 내부에서 메소드 이름이 동일한 메소드가 여러 개 있는 것.
	인수가 개수 or 타입이 다르면 다른 메소드이다.

   - 작성법
	modifier는 같아도 달라도 상관없다
	리턴 타입 같아도 달라도 상관없다
	메소드이름 동일
	인수 달라야 한다

   - 이유 : 사용자 편의성!!! ex) println(), print()  - double이든 int이든 String이든 고민하지 않아도 다 호출됨




[4] 전역 변수 = 멤버변수 = Field = property
	:클래스 내부에서 선언된 변수
	  객체가 생성되는 시점에 자동 초기화된다

	  정수형: 0,  실수형: 0.0,  논리형: false,   문자형: '\u000'
	  객체형: null
	
	: modifier 선언가능
	  public, protected, default(생략), private / static, final

	: 모든 메소드에서 접근 가능



    지역 변수 : 메소드 내부에서 선언된 변수
		자동 초기화 안됨, 반드시 사용 전에 초기화 필수
		선언된 메소드 내부에서만 접근 가능(메소드가 끝나면 소멸)

	*전역변수와 지역변수 이름 같을 때
		this.변수이름 구분 -> 전역변수 뜻함




[5] ~.java문서 안에 클래스 여러개 작성 가능
	단, public 클래스는 딱 한 개!!! 반드시 'public class이름'으로 파일명 작성.

	class 선언 앞에 public or 생략(dafault) 올 수 있다.
